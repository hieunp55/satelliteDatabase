<!-- version 0.1 -->
This is a simple postgis query tool for rendering postgis raster and geometry outputs.  
It can only display one image at a time and is currently hard-coded to output PNG 
using postgis raster image functions.
Feel free to extend it for your needs.

PREREQUISITES:
PHP (preferably PHP5+)
php_pgsql enabled in your php.ini 
  (create a file with  <?php phpinfo(); ?> 
    if you are not sure and it should be listed in the output)
If you run into problems you may need to set your
bytea_output format to escape in your db if
you have PostgreSQL 9.0+, but are using an older php_pgsql driver
as described in http://www.postgis.org/documentation/manual-svn/PostGIS_FAQ.html#id2751314
To do this for this app, in the config.inc.php -- use the line
$bytea_output_setting = "set bytea_output='escape';" 

INSTALLATION: 
1) You need PostGIS 2.0 or later built with raster support 
(you need a fairly recent version that has ST_AsRaster)
2) Change the config.inc.php to the credentials of your database
and if you have issues with the bytea output use the $bytead_output_setting 
escape clause
Please note that this tool since it allows
some ad-hoc queries, if your app is easily accessible on the web, 
you'll want to use 
an account with low level permissions.  So read only access to the tables you 
want and access to execute all the PostGIS functions.
3) run the toraster.sql function in your database to install the 
helper stored function.
4) Make sure the account you specified in web.config has rights 
to execute the function
To verify it works, try this function in psql or 
PgAdmin logged in as the account you have in your web.config
(making sure the account you specified in web.config has rights to execute the function
SELECT postgis_viewer_image('ST_Point(10,20)', 'geometry', ARRAY[100,0,0]);
4) Copy the files to your web server.
Open up:
http://yourserver/postgis_webviewer/postgis_viewer.htm

in a brower.

LIMITATIONS:
1) The viewer can currently only render one geometry or raster tile at a time
2) The viewer can't render the new geometry types like TIN or POLYHEDRAL
or Curved geometries.
This is a limitation of GDAL (which PostGIS raster relies on for rendering).
GDAL will hopefully be enhanced in the future to support these 
more advanced types, if people find it useful enough to 
fund the GDAL work needed to make this happen: http://gdal.org/.  
Then PostGIS will just be able to render these with just SQL.
3) The viewer is hard-coded to output PNG for geometry (100x100).
You can change the plpgsql function to take these 
or hardcode a larger or smaller.
4) The viewer is hardcoded to output in PNG even for rasters.
In next version we plan to add a raw mode so 
you can fully control the type and other properties of the image.
Again this is easy to change.

HOW TO USE:
The viewer currently only shows one geometry or raster at a time, 
so you need to type an SQL expression that resolves to 
one geometry or one raster.  So for example if you are outputing from a table,
you need to have just one column and wrap the query around
for example: (SELECT geom FROM sometable WHERE town='Boston')

Some more examples:
For geometry:
Toggle the spatial type drop down to "Geometry":
Choose a color you want to output the query (the color picker is only relevant for Geometry)
Type in an sql expression that resolves to a geometry.

ST_Buffer(ST_Point(1,1), 10);

-- a more complex geometry example --
ST_Polygon((SELECT ST_SetBandNoDataValue(ST_Band(rast,1),255) FROM ch13.pele_chunked WHERE rid = 1));

For raster:
ST_AsRaster(
		ST_Buffer(
			ST_GeomFromText('LINESTRING(50 50,150 150,150 50)'), 10,'join=bevel'), 
			200,200,ARRAY['8BUI', '8BUI', '8BUI'], ARRAY[118,154,118], ARRAY[0,0,0])
(SELECT rast FROM ch13.pele_chunked ORDER BY rid LIMIT 1 OFFSET 4)
